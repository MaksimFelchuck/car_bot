from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)

import os

TOKEN = os.environ["TOKEN"]


QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, RESULT = range(5)

# –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
QUESTIONS = [
    ("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", "budget"),
    ("–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–µ–¥–∞–Ω, —Ö—ç—Ç—á–±–µ–∫, –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä?", "body_type"),
    ("–í—ã–±–∏—Ä–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –∏–ª–∏ –º–µ—Ö–∞–Ω–∏–∫—É?", "transmission"),
    ("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–∞—à–∏–Ω—ã –∏–ª–∏ –ø–æ–¥–æ–π–¥—É—Ç –∏ –±/—É?", "condition"),
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
ANSWER_OPTIONS = {
    0: ["–¥–æ 500,000", "500,000 - 1,000,000", "–±–æ–ª–µ–µ 1,000,000"],
    1: ["–°–µ–¥–∞–Ω", "–•—ç—Ç—á–±–µ–∫", "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫", "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä"],
    2: ["–ê–≤—Ç–æ–º–∞—Ç", "–ú–µ—Ö–∞–Ω–∏–∫–∞"],
    3: ["–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ", "–ù–æ–≤—ã–µ –∏ –±/—É"],
}

class CarBot:
    def __init__(self, token: str):
        self.app = ApplicationBuilder().token(token).build()
        self.user_answers = {}

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.start))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.handle_answer))

        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º ConversationHandler –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        self.conversation_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                QUESTION_1: [CallbackQueryHandler(self.handle_answer, pattern='^answer_.*$')],
                QUESTION_2: [CallbackQueryHandler(self.handle_answer, pattern='^answer_.*$')],
                QUESTION_3: [CallbackQueryHandler(self.handle_answer, pattern='^answer_.*$')],
                QUESTION_4: [CallbackQueryHandler(self.handle_answer, pattern='^answer_.*$')],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data='start_test')],
            # [InlineKeyboardButton("–ú–æ–π ID", callback_data='get_id')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ-–æ–ø—Ä–æ—Å–Ω–∏–∫! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=reply_markup)
        return ConversationHandler.END

    async def start_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        self.user_answers.clear()
        question_text, _ = QUESTIONS[0]
        await update.callback_query.message.edit_text(f"üéØ {question_text}")
        await self.send_buttons(update, 0)
        return QUESTION_1

    async def send_buttons(self, update: Update, question_index: int) -> None:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        question_text, _ = QUESTIONS[question_index]
        options = ANSWER_OPTIONS[question_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        keyboard = [
            [InlineKeyboardButton(option, callback_data=f"answer_{index}") for index, option in enumerate(options)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(f"üéØ {question_text}", reply_markup=reply_markup)

    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        query.answer()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'answer_0', 'answer_1' –∏ —Ç.–¥.)
        callback_data = query.data

        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
        if callback_data == 'start_test':
            return await self.start_test(update, context)

        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
        # elif callback_data == 'get_id':
        #     return await self.get_id(update, context)

        answer_index = callback_data.split('_')[-1]
        answer_index = int(answer_index)
        user_id = update.effective_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        if user_id not in self.user_answers:
            self.user_answers[user_id] = []
        self.user_answers[user_id].append(ANSWER_OPTIONS[len(self.user_answers[user_id])][answer_index])

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if len(self.user_answers[user_id]) < len(QUESTIONS):
            await self.send_buttons(update, len(self.user_answers[user_id]))
            return len(self.user_answers[user_id])
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            summary = "\n".join([f"{QUESTIONS[i][0]}: {self.user_answers[user_id][i]}" for i in range(len(QUESTIONS))])
            await query.edit_message_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n{summary}")
            return ConversationHandler.END

    async def get_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        await update.callback_query.message.edit_text(f"–í–∞—à ID: {user_id}")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END

    def run(self):
        self.app.add_handler(self.conversation_handler)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.app.run_polling()


if __name__ == "__main__":
    bot = CarBot(TOKEN)
    bot.run()
