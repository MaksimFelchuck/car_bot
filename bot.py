from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)

import os
import httpx

TOKEN = os.environ["TOKEN"]
import re


def validate_phone(phone: str) -> bool:
    pattern = re.compile(r"^(?:\+7|8)\d{10}$")
    return bool(pattern.match(phone))



QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5, QUESTION_6, WAIT_PHONE, RESULT = range(8)

# –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
QUESTIONS = [
    ("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", "budget"),
    ("–ö–æ–≥–¥–∞ –¥–ª—è –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", "time_limit"),
    ("–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ?", "sell_auto"),
    ("–ú–∞—Ä–∫–∏ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?", "mark"),
    ("–í –∫–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ?", "region"),
    ("–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", "contact"),
    # ("–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–µ–¥–∞–Ω, —Ö—ç—Ç—á–±–µ–∫, –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä?", "body_type"),
    # ("–í—ã–±–∏—Ä–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –∏–ª–∏ –º–µ—Ö–∞–Ω–∏–∫—É?", "transmission"),
    # ("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–∞—à–∏–Ω—ã –∏–ª–∏ –ø–æ–¥–æ–π–¥—É—Ç –∏ –±/—É?", "condition"),
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
ANSWER_OPTIONS = {
    0: [
        "–¥–æ 1,5 –º–ª–Ω",
        "1,5-3 –º–ª–Ω",  # da
        "3-5 –º–ª–Ω",  # da
        "–±–æ–ª–µ–µ 5 –º–ª–Ω",  # da
    ],
    1: [
        "–¥–æ 10 –¥–Ω–µ–π",  # da
        "–¥–æ 1 –º–µ—Å",  # da
        "–¥–æ 2—Ö –º–µ—Å",
        "–¥–æ 6 –º–µ—Å",
    ],
    2: [
        "–î–∞",
        "–ù–µ—Ç",  # da
    ],
    3: [
        "–ö–æ—Ä–µ–π—Å–∫–∏–µ",  # da
        "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ",  # da
        "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ",  # da
    ],
    4: [
        "–¶–§–û",  # da
        "–°–∏–±–∏—Ä—å",  # da
        "–î–í",  # da
    ],
    5: [
        "TG",  # da
        "Whatsapp",  # da
        "–¢–µ–ª–µ—Ñ–æ–Ω",  # da
    ],
}
GOOD_QUESTION_LIST = [
    "1,5-3 –º–ª–Ω",  # da
    "3-5 –º–ª–Ω",  # da
    "–±–æ–ª–µ–µ 5 –º–ª–Ω",  # da
    "–¥–æ 10 –¥–Ω–µ–π",  # da
    "–¥–æ 1 –º–µ—Å",  # da
    "–ù–µ—Ç",  # da
    "–ö–æ—Ä–µ–π—Å–∫–∏–µ",  # da
    "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ",  # da
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ",  # da
    "–¶–§–û",  # da
    "–°–∏–±–∏—Ä—å",  # da
    "–î–í",  # da
    "TG",  # da
    "Whatsapp",  # da
    "–¢–µ–ª–µ—Ñ–æ–Ω",  # da
]


class CarBot:
    def __init__(self, token: str):
        self.app = ApplicationBuilder().token(token).build()
        self.user_answers = {}


        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º ConversationHandler –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        self.conversation_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", self.start),
                CallbackQueryHandler(self.handle_answer, pattern="^start_test$")
            ],
            states={
                QUESTION_1: [
                    CallbackQueryHandler(self.handle_answer, pattern="^answer_.*$")
                ],
                QUESTION_2: [
                    CallbackQueryHandler(self.handle_answer, pattern="^answer_.*$")
                ],
                QUESTION_3: [
                    CallbackQueryHandler(self.handle_answer, pattern="^answer_.*$")
                ],
                QUESTION_4: [
                    CallbackQueryHandler(self.handle_answer, pattern="^answer_.*$")
                ],
                QUESTION_5: [
                    CallbackQueryHandler(self.handle_answer, pattern="^answer_.*$")
                ],
                QUESTION_6: [
                    CallbackQueryHandler(self.handle_answer, pattern="^answer_.*$")
                ],
                WAIT_PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_phone)
                ],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )
        self.app.add_handler(self.conversation_handler)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")],
            # [InlineKeyboardButton("–ú–æ–π ID", callback_data='get_id')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ-–æ–ø—Ä–æ—Å–Ω–∏–∫! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=reply_markup,
        )
        return ConversationHandler.END

    async def start_test(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
    ) -> int:
        # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        self.user_answers.clear()
        question_text, _ = QUESTIONS[0]
        await update.callback_query.message.edit_text(f"üéØ {question_text}")
        await self.send_buttons(update, 0)
        return QUESTION_1

    async def send_buttons(self, update: Update, question_index: int) -> None:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        question_text, _ = QUESTIONS[question_index]
        options = ANSWER_OPTIONS[question_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton(option, callback_data=f"answer_{index}")
                for index, option in enumerate(options)
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            f"üéØ {question_text}", reply_markup=reply_markup
        )

    async def handle_answer(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        try:
            query = update.callback_query
            await query.answer()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'answer_0', 'answer_1' –∏ —Ç.–¥.)
            callback_data = query.data

            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
            if callback_data == "start_test":
                return await self.start_test(update, context)

            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            # elif callback_data == 'get_id':
            #     return await self.get_id(update, context)

            answer_index = callback_data.split("_")[-1]
            answer_index = int(answer_index)
            user_id = update.effective_user.id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            if user_id not in self.user_answers:
                self.user_answers[user_id] = []
            self.user_answers[user_id].append(
                ANSWER_OPTIONS[len(self.user_answers[user_id])][answer_index]
            )

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            if len(self.user_answers[user_id]) < len(QUESTIONS):
                await self.send_buttons(update, len(self.user_answers[user_id]))
                return len(self.user_answers[user_id])
            else:

                await query.edit_message_text(
                    "üì±–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79998887766:"
                )
                return WAIT_PHONE  # ‚¨Ö –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞
        except httpx.NetworkError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
            print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
            await update.callback_query.message.reply_text(msg)
            return ConversationHandler.END
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await update.callback_query.message.reply_text(msg)
            return ConversationHandler.END

    async def save_phone(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        phone = update.message.text.strip()
        user_id = update.effective_user.id

        if validate_phone(phone):
            if all(
                [
                    self.user_answers[user_id][i] in GOOD_QUESTION_LIST
                    for i in range(len(QUESTIONS))
                ]
            ):
                otstoinik = f"–û–¢–°–¢–û–ô–ù–ò–ö!"

            else:
                otstoinik = f"–†–ê–ë–û–¢–ê–ï–ú!"

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CRM
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. {otstoinik}\n[CRM] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.user_answers.get(user_id)} | –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return WAIT_PHONE

    async def send_to_crm(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        await update.callback_query.message.edit_text(
            "–¢—É—Ç —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Å—Ä–º –∑–∞–ø—Ä–æ—Å, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å..."
        )

    async def get_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        await update.callback_query.message.edit_text(f"–í–∞—à ID: {user_id}")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END

    def run(self):
        self.app.add_handler(self.conversation_handler)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.app.run_polling()


if __name__ == "__main__":
    bot = CarBot(TOKEN)
    bot.run()
